import struct

class DWORD():
    def __init__(self, n):
        if isinstance(n, DWORD) or isinstance(n, WORD) or isinstance(n, QWORD) or isinstance(n, BYTE):
            self.val = n.val
        else:
            self.val = n
        self.mask = 0xFFFFFFFF
        self.val &= self.mask

    def __eq__(self, other):
        d = DWORD(other)
        return d.val == self.val

    def __ne__(self, other):
        d = DWORD(other)
        return d.val != self.val

    def __gt__(self, other):
        d = DWORD(other)
        return d.val > self.val

    def __lt__(self, other):
        d = DWORD(other)
        return d.val < self.val

    def __ge__(self, other):
        d = DWORD(other)
        return d.val >= self.val

    def __le__(self, other):
        d = DWORD(other)
        return d.val <= self.val

    def __str__(self):
        return '0x%08x' % self.val

    def __repr__(self):
        return str(self)

    def __invert__(self):
        return DWORD(self.val ^ self.mask)

    def __neg__(self):
        return DWORD(self.mask + 1 - self.val)

    def __or__(self, n):
        return DWORD(self.val | DWORD(n).val)

    def __and__(self, n):
        return DWORD(self.val & DWORD(n).val)

    def __xor__(self, n):
        return DWORD(self.val ^ DWORD(n).val)

    def __add__(self, n):
        return DWORD(self.val + DWORD(n).val) & self.mask

    def __sub__(self, n):
        return self + (-DWORD(n))

    def __mul__(self, n):
        return DWORD(self.val * DWORD(n).val)

    def __lshift__(self, n):
        return DWORD(self.val << n)

    def __rshift__(self, n):
        return DWORD(self.val >> n)

    def bswap(self):
        return DWORD(struct.unpack('<I', struct.pack('>I', self.val))[0])

    def rol(self, n):
        return (self << n) + (self >> (32 - n))

    def ror(self, n):
        return (self >> n) + (self << (32 - n))

dword = DWORD

class WORD():
    def __init__(self, n):
        if isinstance(n, DWORD) or isinstance(n, WORD) or isinstance(n, QWORD) or isinstance(n, BYTE):
            self.val = n.val
        else:
            self.val = n
        self.mask = 0xFFFF
        self.val &= self.mask

    def __eq__(self, other):
        d = WORD(other)
        return d.val == self.val

    def __ne__(self, other):
        d = WORD(other)
        return d.val != self.val

    def __gt__(self, other):
        d = WORD(other)
        return d.val > self.val

    def __lt__(self, other):
        d = WORD(other)
        return d.val < self.val

    def __ge__(self, other):
        d = WORD(other)
        return d.val >= self.val

    def __le__(self, other):
        d = WORD(other)
        return d.val <= self.val

    def __str__(self):
        return '0x%04x' % self.val

    def __repr__(self):
        return str(self)

    def __invert__(self):
        return WORD(self.val ^ self.mask)

    def __neg__(self):
        return WORD(self.mask + 1 - self.val)

    def __or__(self, n):
        return WORD(self.val | WORD(n).val)

    def __and__(self, n):
        return WORD(self.val & WORD(n).val)

    def __xor__(self, n):
        return WORD(self.val ^ WORD(n).val)

    def __add__(self, n):
        return WORD(self.val + WORD(n).val) & self.mask

    def __sub__(self, n):
        return self + (-WORD(n))

    def __mul__(self, n):
        return WORD(self.val * WORD(n).val)

    def __lshift__(self, n):
        return WORD(self.val << n)

    def __rshift__(self, n):
        return WORD(self.val >> n)

    def bswap(self):
        return WORD(struct.unpack('<H', struct.pack('>H', self.val))[0])

    def rol(self, n):
        return (self << n) + (self >> (16 - n))

    def ror(self, n):
        return (self >> n) + (self << (16 - n))

word = WORD


class BYTE():
    def __init__(self, n):
        if isinstance(n, DWORD) or isinstance(n, WORD) or isinstance(n, QWORD) or isinstance(n, BYTE):
            self.val = n.val
        else:
            self.val = n
        self.mask = 0xFF
        self.val &= self.mask

    def __eq__(self, other):
        d = BYTE(other)
        return d.val == self.val

    def __ne__(self, other):
        d = BYTE(other)
        return d.val != self.val

    def __gt__(self, other):
        d = BYTE(other)
        return d.val > self.val

    def __lt__(self, other):
        d = BYTE(other)
        return d.val < self.val

    def __ge__(self, other):
        d = BYTE(other)
        return d.val >= self.val

    def __le__(self, other):
        d = BYTE(other)
        return d.val <= self.val

    def __str__(self):
        return '0x%02x' % self.val

    def __repr__(self):
        return str(self)

    def __invert__(self):
        return BYTE(self.val ^ self.mask)

    def __neg__(self):
        return BYTE(self.mask + 1 - self.val)

    def __or__(self, n):
        return BYTE(self.val | BYTE(n).val)

    def __and__(self, n):
        return BYTE(self.val & BYTE(n).val)

    def __xor__(self, n):
        return BYTE(self.val ^ BYTE(n).val)

    def __add__(self, n):
        return BYTE(self.val + BYTE(n).val) & self.mask

    def __sub__(self, n):
        return self + (-BYTE(n))

    def __mul__(self, n):
        return BYTE(self.val * BYTE(n).val)

    def __lshift__(self, n):
        return BYTE(self.val << n)

    def __rshift__(self, n):
        return BYTE(self.val >> n)

    def bswap(self):
        return BYTE(self.val)

    def rol(self, n):
        return (self << n) + (self >> (8 - n))

    def ror(self, n):
        return (self >> n) + (self << (8 - n))

byte = BYTE


class QWORD():
    def __init__(self, n):
        if isinstance(n, DWORD) or isinstance(n, WORD) or isinstance(n, QWORD) or isinstance(n, BYTE):
            self.val = n.val
        else:
            self.val = n
        self.mask = 0xFFFFFFFFFFFFFFFF
        self.val &= self.mask

    def __str__(self):
        return '0x%016x' % self.val

    def __repr__(self):
        return str(self)

    def __invert__(self):
        return QWORD(self.val ^ self.mask)

    def __neg__(self):
        return QWORD(self.mask + 1 - self.val)

    def __or__(self, n):
        return QWORD(self.val | QWORD(n).val)

    def __and__(self, n):
        return QWORD(self.val & QWORD(n).val)

    def __xor__(self, n):
        return QWORD(self.val ^ QWORD(n).val)

    def __add__(self, n):
        return QWORD(self.val + QWORD(n).val) & self.mask

    def __sub__(self, n):
        return self + (-QWORD(n))

    def __mul__(self, n):
        return QWORD(self.val * QWORD(n).val)

    def __lshift__(self, n):
        return QWORD(self.val << n)

    def __rshift__(self, n):
        return QWORD(self.val >> n)

    def bswap(self):
        return QWORD(struct.unpack('<Q', struct.pack('>Q', self.val))[0])

    def rol(self, n):
        return (self << n) + (self >> (64 - n))

    def ror(self, n):
        return (self >> n) + (self << (64 - n))
qword = QWORD

